require 'shellwords'

# ----------------------
# EasySOA Demo Buildfile
# ----------------------

############### HOWTO

# Type "buildr help" for a list of available tasks
# Available options: "test=no", "offline=yes", "withtalend=yes"

############### CONFIG LOADING

NUXEO_PATH = (Buildr.settings.user['nuxeo'] != nil ? Buildr.settings.user['nuxeo']['path'] : nil) || Buildr.settings.build['nuxeo']['path'] || ENV['HOME']+'/nuxeo-cap-5.5-tomcat'
TALEND_ESB_PATH = (Buildr.settings.user['talend-esb'] != nil ? Buildr.settings.user['talend-esb']['path'] : nil) || Buildr.settings.build['talend-esb']['path'] || ENV['HOME']+'/talend-esb'
NODE_PATH = (Buildr.settings.user['node'] != nil ? Buildr.settings.user['node']['path'] : nil) || '/usr/local/bin/'
FRASCATI_PATH = './deps/frascati'

RELEASE_VERSION = (Buildr.settings.user['release'] != nil ? Buildr.settings.user['release']['version'] : nil) || Buildr.settings.build['release']['version']

PACKAGING_OUTPUT_PATH = 'easysoa'
PACKAGING_OUTPUT_ARCHIVE = 'easysoa-demo-'+RELEASE_VERSION+'.tar.gz';

# URLs
ESPER_VERSION = "4.3.0"
FRASCATI_VERSION = "1.5-SNAPSHOT"
ESPER_DOWNLOAD_URL = 'http://mirrors.ibiblio.org/pub/mirrors/maven2/com/espertech/esper/' + ESPER_VERSION + '/esper-' + ESPER_VERSION + '.jar'
NODE_WIN_DOWNLOAD_URL = 'http://nodejs.org/dist/v0.6.1/node.exe'
FRASCATI_DOWNLOAD_URL = 'http://www.easysoa.org/download/dev/frascati-runtime-' + FRASCATI_VERSION + '-bin.zip'

# Generated
MANIFEST_RELATIVE_PATH = 'src/main/resources/META-INF/MANIFEST.MF'
ESPER_DEP_PATH = './deps/frascati/lib/esper-4.3.0.jar'

############### CUSTOM FUNCTIONS

# Builds a maven command line according to the given goals, project and the current environment
def maven(goals, project)
  command = 'mvn '
  
  # Goals
  if !goals.is_a?(Array)
    goals = [goals]
  end
  for goal in goals
    command += goal+' '
  end
  
  # Options (from environment)
  if ENV['offline'] == 'yes'
      command += '-o '
  end
  if ENV['test'] == 'no'
      command += '-DskipTests=true '
  end
  
  # Project location
  command += '-f ' + project.base_dir + '/pom.xml'
  
  # Execute
  puts command
  system command
  puts "", ""
  
end
 # 
 
############### PROJECT DEFINITIONS

EASYSOA = 'easysoa'
EASYSOA_COMMON = EASYSOA+':easysoa-common'
EASYSOA_WEB = EASYSOA+':easysoa-web'
EASYSOA_REGISTRY = EASYSOA+':easysoa-registry'
EASYSOA_REGISTRY_PACKAGING = EASYSOA+':easysoa-registry:nuxeo-packaging'
EASYSOA_PROXY = EASYSOA+':easysoa-proxy'
EASYSOA_PAF = EASYSOA+':samples:easysoa-samples-pureairflowers'
EASYSOA_TRAVEL = EASYSOA+':samples:easysoa-samples-smarttravel'
EASYSOA_TALEND = EASYSOA+':samples:Talend-Airport-Service'
EASYSOA_TRAVEL_BACKUP = EASYSOA+':samples:easysoa-samples-smarttravel:easysoa-samples-smarttravel-services-backup'
EASYSOA_STARTUP_MONITOR = EASYSOA+':easysoa-distribution:easysoa-distribution-startup-monitor'

desc 'EasySOA project - Available options for all EasySOA tasks: "test=no" to skip tests, "offline=yes" to build in offline mode, "withtalend=yes" to include Talend ESB'
define 'easysoa', :base_dir => '../' do
  
  task :mvn do
    maven(['clean', 'install'], project)
  end
  
  define 'easysoa-distribution' do
    define 'easysoa-distribution-startup-monitor' do
	    task :mvn do
		  maven(['clean', 'install'], project)
	    end
    end
  end
      
  define 'easysoa-common' do
	  task :mvn do
		maven(['clean', 'install'], project)
	  end
  end
  
  desc 'Service registry project'
  define 'easysoa-registry' do
    
      task :mvn do
        maven(['clean', 'install'], project)
      end
      
      task :nuxeoreset do
        NUXEO_DATA_PATH = _(NUXEO_PATH + '/nxserver/data');
        puts "Cleaning folder: " + NUXEO_DATA_PATH
        rm_rf NUXEO_DATA_PATH
      end
      
      desc 'EasySOA Registry packaging project'
      define 'nuxeo-packaging' do
      
        desc 'Send plugins to Nuxeo'
        task :dist do
        
          PLUGINS_TO_DELETE = FileList[_(NUXEO_PATH+'/nxserver/plugins/*.jar'), _(NUXEO_PATH+'/lib/easysoa-*.jar')]
          puts "===== Nuxeo plugins - Deleting ====="
          puts PLUGINS_TO_DELETE
          rm PLUGINS_TO_DELETE
          
          puts "===== FraSCAti libs - Deploying to '" + NUXEO_PATH + "' ====="
          puts "(TEMPORARILY DISABLED DUE TO NUXEO 5.5 COMPATIBILITY ISSUES)"
          # FIXME
          # puts FileList[project(EASYSOA_REGISTRY).base_dir + '/nuxeo-frascati/resources/*.jar']
          # puts "(+ " + FileList[project(EASYSOA_REGISTRY).base_dir + '/nuxeo-frascati/resources/frascati/lib/*.jar'].to_a().length().to_s() + " FraSCAti libs)";
          # cp_r FileList[project(EASYSOA_REGISTRY).base_dir + '/nuxeo-frascati/resources/*.jar'], _(NUXEO_PATH + '/lib/')
          # cp_r FileList[project(EASYSOA_REGISTRY).base_dir + '/nuxeo-frascati/resources/frascati/lib/*.jar'], _(NUXEO_PATH + '/lib/')
          
          puts "===== Nuxeo plugins & libs - Deploying to '" + NUXEO_PATH + "' ====="
          puts FileList[project(EASYSOA_REGISTRY_PACKAGING).base_dir+'/target/*']
          cp_r FileList[project(EASYSOA_REGISTRY_PACKAGING).base_dir+'/target/*'], _(NUXEO_PATH)
        end
      
      end
    
  end
  
  define 'easysoa-web' do
    # Nothing
  end
  
  desc 'Esper & Light proxies'
  define 'easysoa-proxy' do
    task :mvn do
      maven(['clean', 'install', '-DskipTests=true'], project) # TODO: Enable tests when tests pass
    end
  end
  
  define 'samples' do
  
    desc 'EasySOA Light proxy project'
    define 'easysoa-samples-pureairflowers' do
      task :mvn do
        maven(['clean', 'install'], project)
      end
    end

    desc 'Smart travel demo project'
    define 'easysoa-samples-smarttravel' do
      task :mvn do
        maven(['clean', 'install'], project)
      end
      desc 'Smart travel backup services project'
      define 'easysoa-samples-smarttravel-services-backup' do
        task :mvn do
          maven(['clean', 'assembly:assembly'], project)
        end
      end
    end
    
    desc 'Talend Airport service project'
    define 'Talend-Airport-Service' do
    	# Nothing
    end
    
  end
  
end


############### TASKS DEFINITIONS
                 
desc "Builds registry components using Maven"
task :common => [EASYSOA_COMMON+':mvn']

desc "Builds registry components using Maven"
task :nx_mvn => ['common', EASYSOA_REGISTRY+':mvn']
                 
desc "Deploys registry components"
task :nx_dist => [EASYSOA_REGISTRY_PACKAGING+':dist']

desc "Deploys registry components"
task :nx_reset => [EASYSOA_REGISTRY+':nuxeoreset']

desc "Cleans all registry components"
task :nx_clean => [EASYSOA_REGISTRY+':clean']
             
desc "Builds the Esper & Light proxies"
task :proxy => [EASYSOA_PROXY+':mvn']

desc "Builds PAF CXF server"
task :paf => [EASYSOA_PAF+':mvn']

desc "Builds the Smart Travel demo and its backup services"
task :travel => [EASYSOA_TRAVEL+':mvn', EASYSOA_TRAVEL_BACKUP+':mvn']

desc "Builds EasySOA startup monitor app"
task :startup => [EASYSOA_STARTUP_MONITOR+':mvn']

desc "Builds all needed projects"
task :buildall => [EASYSOA+':mvn']

desc "Creates the EasySOA package"
task :packageall => [EASYSOA_STARTUP_MONITOR+':mvn'] do # TODO Less messy code

  puts "", "Starting to build EasySOA package"
  
  # Check dependencies
  if !File.exist?(NUXEO_PATH)
    raise "Files copy failed: Nuxeo not found. You need to provide a distribution of Nuxeo DM 5.4.2 in `build.yaml`."
  end
  if !File.exist?(NODE_PATH+'/node')
    raise "Files copy failed: Node not found. You need to provide a built Node path in `build.yaml` (download sources from: http://nodejs.org/#download)."
  end
  
  # Prepare EasySOA environment
  puts "Preparing EasySOA environment..."
  rm_rf PACKAGING_OUTPUT_PATH
  mkdir_p PACKAGING_OUTPUT_PATH
  mkdir_p './deps'
  
  # Download/extract node.js if necessary
  if !File.exist?('./deps/node.exe')
    puts 'Downloading node.js for Windows...'
    system 'wget', NODE_WIN_DOWNLOAD_URL # XXX Linux/Cygwin-dependent
    mv 'node.exe', './deps'
  end
  puts 'Copying node.js...'
  mkdir_p PACKAGING_OUTPUT_PATH+'/node'
  cp './deps/node.exe', PACKAGING_OUTPUT_PATH+'/node'
  begin
    cp NODE_PATH+'/node', PACKAGING_OUTPUT_PATH+'/node'
  rescue Exception
    raise "Files copy failed: Node location seems invalid (binary not found)"
  end
  
  # Download/extract FraSCAti if necessary
  if !File.exist?(FRASCATI_PATH) 
    if !File.exist?('deps/frascati-runtime-'+FRASCATI_VERSION+'-bin.zip')
      puts 'FraSCAti not found, downloading it...'
      system 'wget', FRASCATI_DOWNLOAD_URL # XXX Linux/Cygwin-dependent
      mv 'frascati-runtime-'+FRASCATI_VERSION+'-bin.zip','./deps'
    end
    puts 'Extracting FraSCAti...'
    system 'unzip', '-q', '-o', './deps/frascati-runtime-'+FRASCATI_VERSION+'-bin.zip' # XXX Linux/Cygwin-dependent
    mv 'frascati-runtime-'+FRASCATI_VERSION, './deps/frascati'
    rm_rf FileList['./deps/frascati/doc', './deps/frascati/examples', './deps/frascati/README', './deps/frascati/RELEASE_NOTES']
  end
  if !File.exist?(ESPER_DEP_PATH)
    puts 'Esper not found, downloading it...'
    system 'wget', ESPER_DOWNLOAD_URL # XXX Linux/Cygwin-dependent
    mv './esper-'+ESPER_VERSION+'.jar', ESPER_DEP_PATH
  end

  # Deploy FraSCAti
  puts 'Copying FraSCAti...'
  FileUtils.cp_r FRASCATI_PATH, PACKAGING_OUTPUT_PATH
  
  # Copy web services and proxies
  puts "Copying web services and proxies..."
  puts "  * Needed libraries..."
  cp FileList[project(EASYSOA_REGISTRY).base_dir+"/target/**/*.jar"], PACKAGING_OUTPUT_PATH+'/frascati/lib'
  cp FileList[project(EASYSOA_REGISTRY).base_dir+"/easysoa-registry-api/easysoa-registry-api-messaging/target/*.jar"], PACKAGING_OUTPUT_PATH+'/frascati/lib'
  cp FileList[project(EASYSOA_PROXY).base_dir+"/easysoa-proxy-intents/*/target/*.jar"], PACKAGING_OUTPUT_PATH+'/frascati/lib'
  cp FileList[project(EASYSOA_TRAVEL).base_dir+"/easysoa-samples-smarttravel-currency-model/target/*.jar"], PACKAGING_OUTPUT_PATH+'/frascati/lib'
  cp FileList[project(EASYSOA_TRAVEL).base_dir+"/easysoa-samples-smarttravel-meteo-model/target/*.jar"], PACKAGING_OUTPUT_PATH+'/frascati/lib'
  cp FileList[project(EASYSOA_TRAVEL).base_dir+"/easysoa-samples-smarttravel-summary-model/target/*.jar"], PACKAGING_OUTPUT_PATH+'/frascati/sca-apps' # Conflicting with the Light trip proxy if put in lib/
  cp FileList[project(EASYSOA_TRAVEL).base_dir+"/easysoa-samples-smarttravel-translate-model/target/*.jar"], PACKAGING_OUTPUT_PATH+'/frascati/lib'
  
  puts "  * FraSCAti applications..."
  cp FileList[project(EASYSOA_PROXY).base_dir+"/easysoa-proxy-core/*/target/*.jar"], PACKAGING_OUTPUT_PATH+'/frascati/sca-apps'
  cp FileList[project(EASYSOA_TRAVEL).base_dir+"/easysoa-samples-smarttravel-trip/target/*.jar"], PACKAGING_OUTPUT_PATH+'/frascati/sca-apps'
  system 'unzip', '-q', '-o', FileList[project(EASYSOA_PROXY).base_dir+'/easysoa-proxy-core/easysoa-proxy-core-scaffolderproxy/target/*-bin.zip'].to_s, '-d', 'tmp' # XXX Linux-dependent
  rm FileList['tmp/easysoa-proxy-core-scaffolderproxy*/lib/frascati*'] # Filter FraSCAti dependencies (already provided in the distribution)
  mv FileList['tmp/easysoa-proxy-core-scaffolderproxy*/lib/*'], PACKAGING_OUTPUT_PATH+'/frascati/lib'
  mv FileList['tmp/easysoa-proxy-core-scaffolderproxy*/bin/*'], PACKAGING_OUTPUT_PATH+'/frascati/sca-apps'
  
  puts "  * PAF services..."
  rm_rf 'tmp'
  mkdir_p 'tmp'
  mkdir_p PACKAGING_OUTPUT_PATH+'/pafServices'
  system 'unzip', '-q', '-o', FileList[project(EASYSOA_PAF).base_dir+'/easysoa-samples-paf-server/target/*-bin.zip'].to_s, '-d', 'tmp' # XXX Linux-dependent
  mv FileList['tmp/easysoa-samples-paf-server*/*'], PACKAGING_OUTPUT_PATH+'/pafServices'
  
  puts "  * Travel backup services..."
  mkdir_p PACKAGING_OUTPUT_PATH+'/travelBackup'  
  system 'unzip', '-q', '-o', FileList[project(EASYSOA_TRAVEL_BACKUP).base_dir+'/target/*-bin.zip'].to_s, '-d', 'tmp' # XXX Linux-dependent
  cp_r FileList['tmp/easysoa-samples-smarttravel-services-backup*/*'], PACKAGING_OUTPUT_PATH+'/travelBackup/'
  rm_rf FileList['tmp/easysoa-samples-smarttravel-services-backup*']
  rm_rf 'tmp'
  
  mkdir PACKAGING_OUTPUT_PATH+'/examples'
  cp_r project(EASYSOA_TRAVEL).base_dir+'/easysoa-samples-smarttravel-trip/src/main/resources/smart-travel-mock-services.composite', PACKAGING_OUTPUT_PATH+'/examples'
  
  # Copy Nuxeo
  puts "Copying service registry (Nuxeo)..."
  begin
    cp_r NUXEO_PATH, PACKAGING_OUTPUT_PATH
  rescue Exception => e
    puts "Files copy failed: Nuxeo is probably running. Could you please stop it?"
    raise e
  end
  system 'mv', '-T', FileList[PACKAGING_OUTPUT_PATH+'/nuxeo-*'].to_s, PACKAGING_OUTPUT_PATH+'/serviceRegistry' # XXX Linux/Cygwin-dependent
  cp_r FileList[project(EASYSOA_REGISTRY).base_dir+'/target/*'], PACKAGING_OUTPUT_PATH+'/serviceRegistry' # TODO Check that bundles exist
  rm_rf FileList[PACKAGING_OUTPUT_PATH+'/serviceRegistry/log/', PACKAGING_OUTPUT_PATH+'/serviceRegistry/tmp/', PACKAGING_OUTPUT_PATH+'/serviceRegistry/nxserver/data/']
  cp_r FileList['./deps/frascati/lib/*'], PACKAGING_OUTPUT_PATH+'/serviceRegistry/lib/' # XXX Dirty way of managing FraSCAti dependencies
  
  # Copy Node.js server
  puts "Copying web server & proxy (node.js)..."
  mkdir PACKAGING_OUTPUT_PATH+'/web'
  cp_r FileList[project(EASYSOA_WEB).base_dir+"/*"], PACKAGING_OUTPUT_PATH+'/web'
  
  # Copy Talend ESB and Talend service
  mkdir PACKAGING_OUTPUT_PATH+'/talend'
  puts "Copying Talend components..."
  if ENV['withtalend'] == 'yes'
	  puts "  * Talend ESB..."
	  cp_r TALEND_ESB_PATH, PACKAGING_OUTPUT_PATH+"/talend"
  end
  puts "  * Talend Airport service..."
  mkdir PACKAGING_OUTPUT_PATH+'/talend/airportService'
  cp_r FileList[project(EASYSOA_TALEND).base_dir+'/SimpleProvider*/*'], PACKAGING_OUTPUT_PATH+"/talend/airportService"
  
  # Copy startup monitor
  mkdir PACKAGING_OUTPUT_PATH+'/startupMonitor'
  cp_r FileList[project(EASYSOA_STARTUP_MONITOR).base_dir+'/target/*.jar'], PACKAGING_OUTPUT_PATH+"/startupMonitor"
  
  # Copy packaging files
  puts "Copying packaging files..."
  cp_r FileList['packaging-files/*'], PACKAGING_OUTPUT_PATH
  
  puts "Packaging done."
  puts "You can launch EasySOA by typing 'cd easysoa', then './run.sh'."
  
end

desc "Creates the EasySOA package"
task :tgz do
  
  rm_f FileList['easysoa-demo-*']
  
  # Tar
  puts "Compressing..."
  system 'tar', '-zcf', PACKAGING_OUTPUT_ARCHIVE, 'easysoa/'  # XXX Linux/Cygwin-dependent
  
  puts "EasySOA successfully compressed in "+PACKAGING_OUTPUT_ARCHIVE
  
end
